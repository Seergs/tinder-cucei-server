# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

union LikeResult = LikeSuccess | MeResultError | UserNotFoundError

type LikeSuccess {
  match: Match
  view: View!
}

type Match {
  createdAt: DateTime!
  id: String!
  updatedAt: DateTime!
  userOne: User!
  userTwo: User!
}

union MeResult = MeResultError | MeResultSuccess

type MeResultError {
  message: String!
}

type MeResultSuccess {
  career: String!
  description: String!
  firstName: String!
  id: String!
  lastName: String!
  preferences: Preferences!
  primaryImageUrl: String!
  secondaryImagesUrl: [String!]!
  studentCode: String!
}

type Mutation {
  dislikePerson(targetUserId: String!): LikeResult!
  likePerson(targetUserId: String!): LikeResult!
  login(loginInputData: UserLoginInput!): UserLoginResult!
  register(registerInputData: UserRegisterInput!): UserRegisterResult!
  setExpoPushToken(token: String!): Boolean!
  updatePreferences(preferences: UpdatePreferencesInput!): UpdatePreferencesResult!
  updateProfile(inputData: UpdateProfileInput!): UpdateProfileResult!
}

union PeopleResult = MeResultError | PeopleSuccess

type PeopleSuccess {
  people: [Person!]!
}

type Person {
  age: Int!
  birthday: DateTime!
  career: String!
  description: String!
  firstName: String!
  id: String!
  interests: [String!]!
  lastName: String!
  primaryImageUrl: String!
  secondaryImagesUrl: [String!]!
}

type Preferences {
  interests: [String!]!
  maxAge: Int!
  minAge: Int!
  preferedGender: String!
}

type Query {
  matches: [Match!]
  me: MeResult!
  people(limit: Int!): PeopleResult!
}

input UpdatePreferencesInput {
  interests: [String!]!
  maxAge: Int!
  minAge: Int!
  preferedGender: String!
}

type UpdatePreferencesInputError {
  interests: String
  maxAge: String
  minAge: String
  preferedGender: String
}

union UpdatePreferencesResult = MeResultError | UpdatePreferencesInputError | UpdatePreferencesSuccess

type UpdatePreferencesSuccess {
  preferences: Preferences!
}

input UpdateProfileInput {
  career: String!
  description: String!
  firstName: String!
  lastName: String!
  primaryImageUrl: String!
  secondaryImagesUrl: [String!]!
}

type UpdateProfileInputError {
  career: String
  description: String
  firstName: String
  lastName: String
  primaryImageUrl: String
}

union UpdateProfileResult = MeResultError | UpdateProfileInputError | UpdateProfileSuccess

type UpdateProfileSuccess {
  updated: Boolean!
}

type User {
  age: Int!
  birthday: DateTime!
  career: String!
  createdAt: DateTime!
  description: String!
  expoPushToken: String!
  firstName: String!
  gender: String!
  id: String!
  lastName: String!
  matches: [Match!]!
  preferences: Preferences!
  primaryImageUrl: String!
  secondaryImagesUrl: [String!]!
  studentCode: String!
  updatedAt: DateTime!
}

input UserLoginInput {
  studentCode: String!
  studentNip: String!
}

type UserLoginInvalidInputError {
  credentials: String
  studentCode: String
  studentNip: String
}

union UserLoginResult = UserLoginInvalidInputError | UserLoginResultSuccess

type UserLoginResultSuccess {
  firstName: String!
  id: String!
  jwt: String!
  preferences: Preferences!
  studentCode: String!
}

type UserNotFoundError {
  message: String!
}

input UserRegisterInput {
  birthday: String!
  career: String!
  description: String!
  firstName: String!
  gender: String!
  lastName: String!
  primaryImageUrl: String!
  secondaryImagesUrl: [String!]!
  studentCode: String!
  studentNip: String!
}

type UserRegisterInvalidInputError {
  birthday: String
  campus: String
  career: String
  credentials: String
  description: String
  firstName: String
  gender: String
  lastName: String
  primaryImageUrl: String
  studentCode: String
  studentNip: String
}

union UserRegisterResult = UserRegisterInvalidInputError | UserRegisterResultSuccess

type UserRegisterResultSuccess {
  user: User!
}

type View {
  createdAt: DateTime!
  id: String!
  liked: Boolean!
  updatedAt: DateTime!
}
